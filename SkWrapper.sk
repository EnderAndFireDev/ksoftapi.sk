# CREATED BY GAMINGGEEK AND ENDER #
# Acknowledgements: K.Soft API & NANI #

options:
	token: token XXXXXXXXXXXXXXXXXXXXXXXXXX # <-- You would enter your K.Soft API token here. You can get one by submitting an application to: https://api.ksoft.si/dashboard/ #
	lyricerror: No lyrics found for that search query!

function url(url: text) :: text:
	replace all "ยง" with "&" in {_url}
	return {_url}

import:
	ch.njol.skript.Skript
	ch.njol.skript.lang.LiteralList
	ch.njol.skript.lang.Variable
	ch.njol.skript.lang.VariableString
	ch.njol.skript.lang.util.SimpleLiteral
	ch.njol.skript.variables.Variables

local effect set variable %-objects% to %-objects% in %event%:
	trigger:
		set {_variable} to expression-1
		set {_name} to {_variable}.getName().toString(expression-3)
		Variables.setVariable({_name}, expression-2, expression-3, {_variable}.isLocal())

on load:
	send a request to url("https://api.ksoft.si/images/tags") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
	map json last response's body to {_tags::*}
	delete {ksofttags::*}
	set {ksofttags::*} to join {_tags::tags::*} by ", "

#---------------------------------------------------------------------------------------------------
#				            Random-Meme
#		         This is the section that contains all random-meme code
#----------------------------------------------------------------------------------------------------

effect (get|generate) random meme:
	trigger:
		delete {randmeme::*}
		send a request to url("https://api.ksoft.si/meme/random-meme") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_meme::*}
		set {randmeme::img} to {_meme::image_url}
		set {randmeme::title} to {_meme::title}
		set {randmeme::source} to {_meme::source}
		set {randmeme::subreddit} to {_meme::subreddit}
		set {randmeme::upvotes} to {_meme::upvotes}
		set {randmeme::downvotes} to {_meme::downvotes}
		set {randmeme::comments} to {_meme::comments}
		set {randmeme::nsfw} to {_meme::nsfw}
		set {randmeme::author} to {_meme::author}

expression last randmeme (img|image): # returns the image url. handy for using in discord embeds (Discord integration requires Vixio)
	get:
		return {randmeme::img}

expression last randmeme (title|name): # returns the meme title. #
	get:
		return {randmeme::title}

expression last randmeme (url|link): # source of the post. always starts with https://reddit.com #
	get:
		return {randmeme::source}

expression last randmeme (subreddit|reddit): # returns the subreddits of the post #
	get:
		return {randmeme::subreddit}

expression last randmeme (upvotes|likes): # returns the upvotes/likes of a post #
	get:
		return {randmeme::upvotes}

expression last randmeme (downvotes|dislikes): # returns the downvotes/dislikes #
	get:
		return {randmeme::downvotes}

expression last randmeme (comments|replies): # returns the amount of comments, not the comments
	get:
		return {randmeme::comments}

expression last randmeme (nsfw state|nsfw|nsfw status): # returns a boolean (true/false), not a string ("true"/"false")
	get:
		return {randmeme::nsfw}

expression last randmeme (author|user): # returns the author of the post in the form of "u/username"
	get:
		return {randmeme::author}

#---------------------------------------------------------------------------------------------------
#				            Lyric Search
#		         This is the section that contains all lyric search code
#----------------------------------------------------------------------------------------------------

effect (search|find) lyrics for %string% with text only %boolean%[, clean up %-boolean%][(, | and) limit results to %-integer%]:
	trigger:
		delete {lastlyric::*}
		if expression-2 is false:
			set {_tonly} to false
		if expression-2 is true:
			set {_tonly} to true
		if expression-3 is set:
			set {_clean} to expression-3
		if expression-4 is not set:
			set {_limit} to 10
		else:
			set {_limit} to expression-3
		send a request to url("https://api.ksoft.si/lyrics/search?q=%expression-1%&text_only=%{_tonly}%&limit=%{_limit}%&clean_up=%{_clean}%") with headers "User-Agent: Skript", "Accept: application/json" and "Authorization: {@token}"
		map json last response's body to {_lyrics::*}
		set {lastlyric::total} to {_lyrics::total}
		set {lastlyric::took} to {_lyrics::took}
		loop {_limit} times:
			set {lastlyric::artist::%loop-value%} to {_lyrics::data::%loop-value%::artist}
			set {lastlyric::artist_id::%loop-value%} to {_lyrics::data::%loop-value%::artist_id}
			set {lastlyric::album::%loop-value%} to {_lyrics::data::%loop-value%::album}
			set {lastlyric::album_id::%loop-value%} to {_lyrics::data::%loop-value%::album_ids}
			set {lastlyric::album_year::%loop-value%} to {_lyrics::data::%loop-value%::album_year}
			set {lastlyric::tracktitle::%loop-value%} to {_lyrics::data::%loop-value%::name}
			set {lastlyric::tracklyrics::%loop-value%} to {_lyrics::data::%loop-value%::lyrics}
			set {lastlyric::search_query::%loop-value%} to {_lyrics::data::%loop-value%::search_str}
			set {lastlyric::trackid::%loop-value%} to {_lyrics::data::%loop-value%::id}
			set {lastlyric::query_score::%loop-value%} to {_lyrics::data::%loop-value%::search_score}

# If "for result n" is not specified, it will always return the first result in the search no matter what.

expression last lyric error: # returns the lyric query error.
	get:
		if {lastlyric::total} is 0:
			return "{@lyricerror}"

expression last lyric results: # returns the amount of songs in the API.
	get:
		return {lastlyric::total}

expression last lyric time: # returns the time taken to make the request.
	get:
		return {lastlyric::took}

expression last lyric (artist|singer)[ for result %integer%]: # returns the last artist for the specified song result.
	get:
		if expression-1 is set:
			return {lastlyrics::artist::%expression-1%}
		else:
			return {lastlyrics::artist::1}

expression last lyric (artist_id|singer_id)[ for result %integer%]: # returns the artist's ID on lyrics.wikia.com. #
	get:
		if expression-1 is set:
			return {lastlyric::artist_id::%expression-1%}
		else:
			return {lastlyric::artist_id::1}

expression last lyric album[ for result %integer%]: # returns the album for the specified song result. #
	get:
		if expression-1 is set:
			return {lastlyric::album::%expression-1%}
		else:
			return {lastlyric::album::1}

expression last lyric album id[ for result %integer%]: # returns the results's album ID. #
	get:
		if expression-1 is set:
			return {lastlyric::album_id::%expression-1%}
		else:
			return {lastlyric::album_id::1}

expression last lyric album year[ for result %integer%]: # returns the results's album year. #
	get:
		if expression-1 is set:
			return {lastlyric::album_id::%expression-1%}
		else:
			return {lastlyric::album_id::1}

expression last lyric (title|track name)[ for result %integer%]: # returns the results's track title. #
	get:
		if expression-1 is set:
			return {lastlyric::tracktitle::%expression-1%}
		else:
			return {lastlyric::tracktitle::1}

expression last lyrics[ for result %integer%]: # returns the results's track lyrics. # Note to Vixio users: If the lyrics are too long and do not fit inside your embed, try putting it inside your description. #
	get:
		if expression-1 is set:
			return {lastlyric::tracklyrics::%expression-1%}
		else:
			return {lastlyric::tracklyrics::1}

expression last lyric (query|search|result)[ for result %integer%]: # returns the results's search query for the lyrics. #
	get:
		if expression-1 is set:
			return {lastlyric::search_query::%expression-1%}
		else:
			return {lastlyric::search_query::1}

expression last lyric track id[ for result %integer%]: # returns the results's track ID. #
	get:
		if expression-1 is set:
			return {lastlyric::trackid::%expression-1%}
		else:
			return {lastlyric::trackid::1}

expression last lyric (score|query score)[ for result %integer%]: # returns the results's query score. #
	get:
		if expression-1 is set:
			return {lastlyric::query_score::%expression-1%}
		else:
			return {lastlyric::query_score::1}

#---------------------------------------------------------------------------------------------------
#				            Random-Meme-from-Subreddit
#		         This is the section that contains all subreddit meme code
#----------------------------------------------------------------------------------------------------

effect (get|generate) random meme from subreddit %string%[ with nsfw %-boolean%][ (and|with) span %-string%]: #Expression 3 (Span) should be "hour", "day", "week", "month" or "year" or excluded for all
	trigger:
		delete {randreddit::*}
		if expression-2 is not set:
			set {_nsfw} to false
		else:
			set {_nsfw} to expr-2
		if expression-3 is not set:
			set {_span} to "all"
		else:
			set {_span} to expr-3
		send a request to url("https://api.ksoft.si/images/rand-reddit/%expr-1%?remove_nsfw=%{_nsfw}%&span=%{_span}%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_meme::*}
		set {randreddit::img} to {_meme::image_url}
		set {randreddit::title} to {_meme::title}
		set {randreddit::source} to {_meme::source}
		set {randreddit::subreddit} to {_meme::subreddit}
		set {randreddit::upvotes} to {_meme::upvotes}
		set {randreddit::downvotes} to {_meme::downvotes}
		set {randreddit::comments} to {_meme::comments}
		set {randreddit::nsfw} to {_meme::nsfw}
		set {randreddit::author} to {_meme::author}

expression last randreddit (img|image): # returns the image url. handy for using in discord embeds (Discord integration requires Vixio)
	get:
		return {randreddit::img}

expression last randreddit (title|name): # returns the meme title. #
	get:
		return {randreddit::title}

expression last randreddit (url|link): # source of the post. always starts with https://reddit.com #
	get:
		return {randreddit::source}

expression last randreddit (subreddit|reddit): # returns the subreddits of the post #
	get:
		return {randreddit::subreddit}

expression last randreddit (upvotes|likes): # returns the upvotes/likes of a post #
	get:
		return {randreddit::upvotes}

expression last randreddit (downvotes|dislikes): # returns the downvotes/dislikes #
	get:
		return {randreddit::downvotes}

expression last randreddit (comments|replies): # returns the amount of comments, not the comments
	get:
		return {randreddit::comments}

expression last randreddit (nsfw state|nsfw|nsfw status): # returns a boolean (true/false), not a string ("true"/"false")
	get:
		return {randreddit::nsfw}

expression last randreddit (author|user): # returns the author of the post in the form of "u/username"
	get:
		return {randreddit::author}

#---------------------------------------------------------------------------------------------------
#				            Random WikiHow Post
#		         This is the section that contains all random wikihow code
#----------------------------------------------------------------------------------------------------

effect (get|generate) random post from wikihow[ with nsfw %-boolean%]:
	trigger:
		delete {randwh::*}
		if expression-2 is not set:
			set {_nsfw} to false
		else:
			set {_nsfw} to expr-2
		send a request to url("https://api.ksoft.si/images/random-wikihow?nsfw=%{_nsfw}%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_wikihow::*}
		set {randwh::url} to {_wikihow::url}
		set {randwh::title} to {_wikihow::title}
		set {randwh::nsfw} to {_wikihow::nsfw}
		set {randwh::post} to {_wikihow::article_url}

expression last wikihow (url|link): # returns the image url. handy for using in discord embeds (Discord integration requires Vixio)
	get:
		return {randwh::url}

expression last wikihow (title|name): # returns the wikihow post title. #
	get:
		return {randwh::title}

expression last wikihow (nsfw|safe): # boolean. is nsfw or not. #
	get:
		return {randwh::nsfw}

expression last wikihow (post|article url): # returns the location of the post on wikihow.com #
	get:
		return {randwh::url}

#---------------------------------------------------------------------------------------------------
#				            Kumo Data & Geolocation
#		         This is the section that contains all Kumo code.
#----------------------------------------------------------------------------------------------------

effect (search|find) location with query %string%[ is fast %-boolean%][ is more %-boolean%][ and (set|assign) map zoom to %-integer%][ and (includes|has) map %-boolean%]:
	trigger:
		delete {lastloc::*}
		if expression-2 is not set:
			set {_fast} to true
		else:
			set {_fast} to false
		if expression-3 is not set:
			set {_more} to false
		else:
			set {_more} to true
		if expression-4 is not set:
			set {_zoom} to 12
		else:
			set {_zoom} to expression-4
		if expression-5 is not set:
			set {_map} to false
		else:
			set {_map} to true
		send a request to url("https://api.ksoft.si/kumo/gis?q=%expression-1%&fast=%{_fast}%&more=%{_more}%&map_zoom=%{_zoom}%&include_map=%{_map}%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_kumo::gis::*}
		set {lastloc::response::error} to {_kumo::gis::error}
		set {lastloc::response::code} to {_kumo::gis::code}
		set {lastloc::location::address} to {_kumo::gis::data::address}
		set {lastloc::location::latitude} to {_kumo::gis::data::lat}
		set {lastloc::location::longtitude} to {_kumo::gis::data::lon}
		set {lastloc::location::areabox::*} to {_kumo::gis::data::bounding_box} # This object is special, because it is a list. To specify all points of the area box, use {lastloc::location::areabox::1}, {lastloc::location::areabox::2} etc. #
		set {lastloc::location::type::*} to {_kumo::gis::data::type} # Same as above #
		set {lastloc::location::map} to {_kumo::gis::data::map}

expression last gis error: # true or false, weather an error occoured #
	get:
		return {lastloc::response::error}

expression last gis (status|code|http code): # returns the status code. 200 for success, others may be errors. #
	get:
		return {lastloc::response::code}

expression last gis (location|address): # returns the location of the gis search #
	get:
		return {lastloc::response::address}

expression last gis (latitude|lat): # returns the latitude of the gis location #
	get:
		return {lastloc::location::latitude}

expression last gis (longtitude|lon): # returns the longtitude of the gis location #
	get:
		return {lastloc::location::longtitude}

expression last gis (area|box|area box) with id %-integer%: # returns the area box location which you specified. #
	get:
		if expression-1 is greater than size of {lastloc::location::areabox::*}:
			return "Value must be less than %size of {lastloc::location::areabox::*}%"
		else:
			return {lastloc::location::areabox::%expression-1%}

expression last gis (type|monuments|areas of interest|aoi) with id %-integer%: # returns the area of interest which you specified #
	get:
		if expression-1 is greater than size of {lastloc::location::type::*}:
			return "Value must be less than %size of {lastloc::location::type::*}%"
		else:
			return {lastloc::location::type::%expression-1%}

expression last gis (map|location map): # returns the map of the gis location #
	get:
		return {lastloc::location::map}


#---------------------------------------------------------------------------------------------------
#				            Other Image Related Requests
#		         This is the section that contains all other image code
#----------------------------------------------------------------------------------------------------

expression all image tags:
	get:
		return {ksofttags::*}

#---------------------------------------------------------------------------------------------------
#				            Simple Ban functions
#		         This is the section that contains some ban functions
#----------------------------------------------------------------------------------------------------

effect check ban status for %user%:
	trigger:
		send a request to url("https://api.ksoft.si/bans/check?user=%id of expr-1%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_ban::*}
		delete {bancheck}
		set {bancheck} to {_ban::is_banned}

expression last ban status:
	get:
		return {bancheck}

#Functioning variable storing
effect get random data and store it in %objects%:
    trigger:
        add "this", "is", "some", "random" and "data" to {_test::*}
        set {_v} to "%raw expression 1%"
        if {_v} doesn't contain "::*":
            stop #Must be a list variable
        if {%{_v}%} is set:
            delete {%{_v}%}
        else:
            replace all "{", "::*" and "}" in {_v} with ""
            set {%{_v}%::*} to {_test::*}
