# Copyright (c) 2019-present EnderAndFireDev

# Trust me, work on this will be starting again soon #
# CREATED BY GAMINGGEEK AND ENDER #
# Acknowledgements: K.Soft API & NANI #

options:
	token: token XXXXXXXXXXXXXXXXXXXXXXXXXX # <-- You would enter your K.Soft API token here. You can get one by submitting an application to: https://api.ksoft.si/dashboard/ #
	lyricerror: No lyrics found for that search query!

function url(url: text) :: text:
	replace all "§" with "&" in {_url}
	return {_url}

import:
	ch.njol.skript.Skript
	ch.njol.skript.lang.LiteralList
	ch.njol.skript.lang.Variable
	ch.njol.skript.lang.VariableString
	ch.njol.skript.lang.util.SimpleLiteral
	ch.njol.skript.variables.Variables

	org.bukkit.Bukkit

# Stuff taken from imagesk for errors and warnings#

on load:
	set {ksoftapi::Logger} to Bukkit.getServer().getLogger() # for warn/error #

local effect [(1¦parse)] error %string%:
	trigger:
		if parse mark is 1:
			Skript.error(expression-1)
		else:
			{ksoftapi::Logger}.severe("[ksoftapi] %expression-1%")

local effect warning %string%:
	trigger:
		{ksoftapi::Logger}.warning("[ksoftapi] %expression-1%")

local effect set variable %-objects% to %-objects% in %event%:
	trigger:
		set {_variable} to expression-1
		set {_name} to {_variable}.getName().toString(expression-3)
		Variables.setVariable({_name}, expression-2, expression-3, {_variable}.isLocal())

on load:
	send a request to url("https://api.ksoft.si/images/tags") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
	map json last response's body to {_tags::*}
	delete {ksofttags::*}
	set {ksofttags::*} to join {_tags::tags::*} by ", "

#---------------------------------------------------------------------------------------------------
#				            Random-Meme
#		         This is the section that contains all random-meme code
#----------------------------------------------------------------------------------------------------

effect (get|generate) random meme and store it in %objects%: #e.g. 'get random meme and store it in {_meme::*}' would make '{_meme::img}' the image url
	trigger:
		send a request to url("https://api.ksoft.si/meme/random-meme") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_meme::*}
		set {_v} to "%raw expression 1%"
		if {_v} doesn't contain "::*":
			parse error "%raw expression 1% is not a list variable"
			stop #Must be a list variable
		replace all "{", "::*" and "}" in {_v} with ""
		delete {%{_v}%::*}
		set {%{_v}%::img} to {_meme::image_url}
		set {%{_v}%::title} to {_meme::title}
		set {%{_v}%::source} to {_meme::source}
		set {%{_v}%::subreddit} to {_meme::subreddit}
		set {%{_v}%::upvotes} to {_meme::upvotes}
		set {%{_v}%::downvotes} to {_meme::downvotes}
		set {%{_v}%::comments} to {_meme::comments}
		set {%{_v}%::nsfw} to {_meme::nsfw}
		set {%{_v}%::author} to {_meme::author}

#---------------------------------------------------------------------------------------------------
#				            Lyric Search
#		         This is the section that contains all lyric search code
#----------------------------------------------------------------------------------------------------

effect (search|find) lyrics for %string% and store them in %objects% using options text only %boolean%[(, |and) clean up %-boolean%][(, | and) limit results to %-integer%]:
	trigger:
		if expression-3 is false:
			set {_tonly} to false
		if expression-3 is true:
			set {_tonly} to true
		if expression-4 is set:
			set {_clean} to expression-4
		else:
			set {_clean} to false
		if expression-5 is not set:
			set {_limit} to 10
		else:
			set {_limit} to expression-4
		send a request to url("https://api.ksoft.si/lyrics/search?q=%url safe expression-1%&text_only=%{_tonly}%&limit=%{_limit}%&clean_up=%{_clean}%") with headers "User-Agent: Skript", "Accept: application/json" and "Authorization: {@token}"
		map json last response's body to {_lyrics::*}
		set {_v} to "%raw expression 2%"
		if {_v} doesn't contain "::*":
			parse error "%raw expression 2% is not a list variable"
			stop #Must be a list variable
		replace all "{", "::*" and "}" in {_v} with ""
		delete {%{_v}%::*}
		set {%{_v}%::total} to {_lyrics::total}
		set {%{_v}%::took} to {_lyrics::took}
		loop {_limit} times:
			set {%{_v}%::artist::%loop-value%} to {_lyrics::data::%loop-value%::artist}
			set {%{_v}%::artist_id::%loop-value%} to {_lyrics::data::%loop-value%::artist_id}
			set {%{_v}%::album::%loop-value%} to {_lyrics::data::%loop-value%::album}
			set {%{_v}%::album_id::%loop-value%} to {_lyrics::data::%loop-value%::album_ids}
			set {%{_v}%::album_year::%loop-value%} to {_lyrics::data::%loop-value%::album_year}
			set {%{_v}%::tracktitle::%loop-value%} to {_lyrics::data::%loop-value%::name}
			set {%{_v}%::tracklyrics::%loop-value%} to {_lyrics::data::%loop-value%::lyrics}
			set {%{_v}%::search_query::%loop-value%} to {_lyrics::data::%loop-value%::search_str}
			set {%{_v}%::trackid::%loop-value%} to {_lyrics::data::%loop-value%::id}
			set {%{_v}%::query_score::%loop-value%} to {_lyrics::data::%loop-value%::search_score}

#---------------------------------------------------------------------------------------------------
#				            Random-Meme-from-Subreddit
#		         This is the section that contains all subreddit meme code
#----------------------------------------------------------------------------------------------------

effect (get|generate) random meme from subreddit %string% and store it in %objects% [using options][ nsfw %-boolean%][ (, |and) span %-string%]: #Expression 4 (Span) should be "hour", "day", "week", "month" or "year" or excluded for all
	trigger:
		if expression-3 is not set:
			set {_nsfw} to false
		else:
			set {_nsfw} to expr-3
		if expression-4 is not set:
			set {_span} to "all"
		else:
			set {_span} to expr-4
		send a request to url("https://api.ksoft.si/images/rand-reddit/%expr-1%?remove_nsfw=%{_nsfw}%&span=%{_span}%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_meme::*}
		set {_v} to "%raw expression 2%"
		if {_v} doesn't contain "::*":
			parse error "%raw expression 2% is not a list variable"
			stop #Must be a list variable
		replace all "{", "::*" and "}" in {_v} with ""
		delete {%{_v}%::*}
		set {%{_v}%::img} to {_meme::image_url}
		set {%{_v}%::title} to {_meme::title}
		set {%{_v}%::source} to {_meme::source}
		set {%{_v}%::subreddit} to {_meme::subreddit}
		set {%{_v}%::upvotes} to {_meme::upvotes}
		set {%{_v}%::downvotes} to {_meme::downvotes}
		set {%{_v}%::comments} to {_meme::comments}
		set {%{_v}%::nsfw} to {_meme::nsfw}
		set {%{_v}%::author} to {_meme::author}

#---------------------------------------------------------------------------------------------------
#				            Random WikiHow Post
#		         This is the section that contains all random wikihow code
#----------------------------------------------------------------------------------------------------

effect (get|generate) random post from wikihow and store it in %objects%[ with nsfw %-boolean%]:
	trigger:
		if expression-2 is not set:
			set {_nsfw} to false
		else:
			set {_nsfw} to expr-2
		send a request to url("https://api.ksoft.si/images/random-wikihow?nsfw=%{_nsfw}%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_wikihow::*}
		set {_v} to "%raw expression 1%"
		if {_v} doesn't contain "::*":
			parse error "%raw expression 1% is not a list variable"
			stop #Must be a list variable
		replace all "{", "::*" and "}" in {_v} with ""
		delete {%{_v}%::*}
		set {%{_v}%::url} to {_wikihow::url}
		set {%{_v}%::title} to {_wikihow::title}
		set {%{_v}%::nsfw} to {_wikihow::nsfw}
		set {%{_v}%::post} to {_wikihow::article_url}

#---------------------------------------------------------------------------------------------------
#				            Kumo Data & Geolocation
#		         This is the section that contains all Kumo code.
#----------------------------------------------------------------------------------------------------

#TODO Make Kumo use variable storage system and better syntax

effect (search|find) location with query %string%[ is fast %-boolean%][ is more %-boolean%][ and (set|assign) map zoom to %-integer%][ and (includes|has) map %-boolean%]:
	trigger:
		delete {lastloc::*}
		if expression-2 is not set:
			set {_fast} to true
		else:
			set {_fast} to false
		if expression-3 is not set:
			set {_more} to false
		else:
			set {_more} to true
		if expression-4 is not set:
			set {_zoom} to 12
		else:
			set {_zoom} to expression-4
		if expression-5 is not set:
			set {_map} to false
		else:
			set {_map} to true
		send a request to url("https://api.ksoft.si/kumo/gis?q=%expression-1%&fast=%{_fast}%&more=%{_more}%&map_zoom=%{_zoom}%&include_map=%{_map}%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_kumo::gis::*}
		set {lastloc::response::error} to {_kumo::gis::error}
		set {lastloc::response::code} to {_kumo::gis::code}
		set {lastloc::location::address} to {_kumo::gis::data::address}
		set {lastloc::location::latitude} to {_kumo::gis::data::lat}
		set {lastloc::location::longtitude} to {_kumo::gis::data::lon}
		set {lastloc::location::areabox::*} to {_kumo::gis::data::bounding_box} # This object is special, because it is a list. To specify all points of the area box, use {lastloc::location::areabox::1}, {lastloc::location::areabox::2} etc. #
		set {lastloc::location::type::*} to {_kumo::gis::data::type} # Same as above #
		set {lastloc::location::map} to {_kumo::gis::data::map}

expression last gis error: # true or false, weather an error occoured #
	get:
		return {lastloc::response::error}

expression last gis (status|code|http code): # returns the status code. 200 for success, others may be errors. #
	get:
		return {lastloc::response::code}

expression last gis (location|address): # returns the location of the gis search #
	get:
		return {lastloc::response::address}

expression last gis (latitude|lat): # returns the latitude of the gis location #
	get:
		return {lastloc::location::latitude}

expression last gis (longtitude|lon): # returns the longtitude of the gis location #
	get:
		return {lastloc::location::longtitude}

expression last gis (area|box|area box) with id %-integer%: # returns the area box location which you specified. NOTE: i think this is broken so will fix soon#
	get:
		if expression-1 is greater than size of {lastloc::location::areabox::*}:
			return "Value must be less than %size of {lastloc::location::areabox::*}%"
		else:
			return {lastloc::location::areabox::%expression-1%}

expression last gis (type|monuments|areas of interest|aoi) with id %-integer%: # returns the area of interest which you specified #
	get:
		if expression-1 is greater than size of {lastloc::location::type::*}:
			return "Value must be less than %size of {lastloc::location::type::*}%"
		else:
			return {lastloc::location::type::%expression-1%}

expression last gis (map|location map): # returns the map of the gis location #
	get:
		return {lastloc::location::map}


#---------------------------------------------------------------------------------------------------
#				            Other Image Related Requests
#		         This is the section that contains all other image code
#----------------------------------------------------------------------------------------------------

expression all image tags:
	get:
		return {ksofttags::*}

#---------------------------------------------------------------------------------------------------
#				            Simple Ban functions
#		         This is the section that contains some ban functions
#----------------------------------------------------------------------------------------------------

effect check ban status for %user%:
	trigger:
		send a request to url("https://api.ksoft.si/bans/check?user=%id of expr-1%") with headers "User-Agent: Skript", "Content-Type: application/json" and "Authorization: {@token}"
		map json last response's body to {_ban::*}
		delete {bancheck}
		set {bancheck} to {_ban::is_banned}

expression last ban status:
	get:
		return {bancheck}

#Functioning variable storing. wait nvm it's a big scam
effect get random data and store it in %objects%:
	trigger:
		add "this", "is", "some", "random" and "data" to {_test::*}
		set {_v} to "%raw expression 1%"
		if {_v} doesn't contain "::*":
			parse error "%raw expression 1% is not a list variable"
			stop #Must be a list variable
		replace all "{", "::*" and "}" in {_v} with ""
		set {%{_v}%::*} to {_test::*}
